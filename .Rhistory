hist(plotD,xlab="cash", main="D")
set.seed(222)
plotA<-round(rnorm(100,75,50),0)
a<-round(rnorm(49,10,3),0)
a[sample(1:49,9)]<-0
b<-round(rnorm(30,35,10),0)
c<-round(rnorm(12,75,20),0)
d<-round(rnorm(5,175,60),0)
plotB<-c(a,b,c,d,250,225,200,180)
plotB[plotB<0]<-0
plotC<-runif(100,0,300)
plotD<-rnorm(100,100,60)
plotD[plotD<0]<-0
par(mfrow=c(2,2))
hist(plotA,xlab="cash", main="A",xlim=c(0,300),ylim=c(0,30))
hist(plotB,xlab="cash", main="B",xlim=c(0,300),ylim=c(0,30))
hist(plotC,xlab="cash", main="C",xlim=c(0,300),ylim=c(0,30))
hist(plotD,xlab="cash", main="D",xlim=c(0,300),ylim=c(0,30))
set.seed(222)
plotA<-round(rnorm(100,75,50),0)
a<-round(rnorm(49,10,3),0)
a[sample(1:49,9)]<-0
b<-round(rnorm(30,35,10),0)
c<-round(rnorm(12,75,20),0)
d<-round(rnorm(5,175,60),0)
plotB<-c(a,b,c,d,250,225,200,180)
plotB[plotB<0]<-0
plotC<-runif(100,0,300)
plotD<-rnorm(100,100,60)
plotD[plotD<0]<-0
par(mfrow=c(2,2))
hist(plotA,xlab="cash", main="A",xlim=c(0,300),ylim=c(0,40),breaks=c(20*0:15))
hist(plotB,xlab="cash", main="B",xlim=c(0,300),ylim=c(0,40),breaks=c(20*0:15))
hist(plotC,xlab="cash", main="C",xlim=c(0,300),ylim=c(0,40),breaks=c(20*0:15))
hist(plotD,xlab="cash", main="D",xlim=c(0,300),ylim=c(0,40),breaks=c(20*0:15))
set.seed(222)
plotA<-round(rnorm(100,75,50),0)
a<-round(rnorm(49,10,3),0)
a[sample(1:49,9)]<-0
b<-round(rnorm(30,35,10),0)
c<-round(rnorm(12,75,20),0)
d<-round(rnorm(5,175,60),0)
plotB<-c(a,b,c,d,250,225,200,180)
plotB[plotB<0]<-0
plotC<-runif(100,0,300)
plotD<-rnorm(100,100,60)
plotD[plotD<0]<-0
par(mfrow=c(2,2))
hist(plotA,xlab="cash", main="A",xlim=c(0,300),ylim=c(0,40),breaks=c(20*0:15))
hist(plotB,xlab="cash", main="B",xlim=c(0,300),ylim=c(0,40),breaks=c(20*0:15))
hist(plotC,xlab="cash", main="C",xlim=c(0,300),ylim=c(0,40),breaks=c(20*0:15))
hist(plotD,xlab="cash", main="D",xlim=c(0,300),ylim=c(0,40),breaks=c(20*0:15))
set.seed(222)
plotA<-round(rnorm(100,75,50),0)
plotA[plotA>300]<-300
a<-round(rnorm(49,10,3),0)
a[sample(1:49,9)]<-0
b<-round(rnorm(30,35,10),0)
c<-round(rnorm(12,75,20),0)
d<-round(rnorm(5,175,60),0)
plotB<-c(a,b,c,d,250,225,200,180)
plotB[plotB<0]<-0
plotC<-runif(100,0,300)
plotD<-rnorm(100,100,60)
plotD[plotD<0]<-0
par(mfrow=c(2,2))
hist(plotA,xlab="cash", main="A",xlim=c(0,300),ylim=c(0,40),breaks=c(20*0:15))
hist(plotB,xlab="cash", main="B",xlim=c(0,300),ylim=c(0,40),breaks=c(20*0:15))
hist(plotC,xlab="cash", main="C",xlim=c(0,300),ylim=c(0,40),breaks=c(20*0:15))
hist(plotD,xlab="cash", main="D",xlim=c(0,300),ylim=c(0,40),breaks=c(20*0:15))
set.seed(222)
plotA<-round(rnorm(100,75,50),0)
plotA[plotA>300]<-300
a<-round(rnorm(49,10,3),0)
a[sample(1:49,9)]<-0
b<-round(rnorm(30,35,10),0)
c<-round(rnorm(12,75,20),0)
d<-round(rnorm(5,175,60),0)
plotB<-c(a,b,c,d,250,225,200,180)
plotB[plotB<0]<-0
plotC<-runif(100,0,300)
plotD<-rnorm(100,100,60)
plotD[plotD<0]<-0
par(mfrow=c(2,2))
hist(plotA,xlab="cash", main="A",xlim=c(0,300),ylim=c(0,40),breaks=c(20*-1:15))
hist(plotB,xlab="cash", main="B",xlim=c(0,300),ylim=c(0,40),breaks=c(20*-1:15))
hist(plotC,xlab="cash", main="C",xlim=c(0,300),ylim=c(0,40),breaks=c(20*-1:15))
hist(plotD,xlab="cash", main="D",xlim=c(0,300),ylim=c(0,40),breaks=c(20*-1:15))
hist(plotA)
min(plotA)
set.seed(222)
plotA<-round(rnorm(100,75,50),0)
plotA[plotA>300]<-300
plotA[plotA<-20]<--20
a<-round(rnorm(49,10,3),0)
a[sample(1:49,9)]<-0
b<-round(rnorm(30,35,10),0)
c<-round(rnorm(12,75,20),0)
d<-round(rnorm(5,175,60),0)
plotB<-c(a,b,c,d,250,225,200,180)
plotB[plotB<0]<-0
plotC<-runif(100,0,300)
plotD<-rnorm(100,100,60)
plotD[plotD<0]<-0
par(mfrow=c(2,2))
hist(plotA,xlab="cash", main="A",xlim=c(0,300),ylim=c(0,40),breaks=c(20*-1:15))
hist(plotB,xlab="cash", main="B",xlim=c(0,300),ylim=c(0,40),breaks=c(20*-1:15))
hist(plotC,xlab="cash", main="C",xlim=c(0,300),ylim=c(0,40),breaks=c(20*-1:15))
hist(plotD,xlab="cash", main="D",xlim=c(0,300),ylim=c(0,40),breaks=c(20*-1:15))
set.seed(222)
plotA<-round(rnorm(100,75,50),0)
plotA[plotA>300]<-300
plotA[plotA<-20]<--20
a<-round(rnorm(49,10,3),0)
a[sample(1:49,9)]<-0
b<-round(rnorm(30,35,10),0)
c<-round(rnorm(12,75,20),0)
d<-round(rnorm(5,175,60),0)
plotB<-c(a,b,c,d,250,225,200,180)
plotB[plotB<0]<-0
plotC<-runif(100,0,300)
plotD<-rnorm(100,100,60)
plotD[plotD<0]<-0
par(mfrow=c(2,2))
hist(plotA,xlab="cash", main="A",xlim=c(-20,300),ylim=c(0,40),breaks=c(20*-1:15))
hist(plotB,xlab="cash", main="B",xlim=c(-20,300),ylim=c(0,40),breaks=c(20*-1:15))
hist(plotC,xlab="cash", main="C",xlim=c(-20,300),ylim=c(0,40),breaks=c(20*-1:15))
hist(plotD,xlab="cash", main="D",xlim=c(-20,300),ylim=c(0,40),breaks=c(20*-1:15))
plotA
hist(plotA)
min(plotA)
set.seed(222)
plotA<-round(rnorm(100,75,50),0)
plotA[plotA>300]<-300
plotA[plotA< -20]<- -20
a<-round(rnorm(49,10,3),0)
a[sample(1:49,9)]<-0
b<-round(rnorm(30,35,10),0)
c<-round(rnorm(12,75,20),0)
d<-round(rnorm(5,175,60),0)
plotB<-c(a,b,c,d,250,225,200,180)
plotB[plotB<0]<-0
plotC<-runif(100,0,300)
plotD<-rnorm(100,100,60)
plotD[plotD<0]<-0
par(mfrow=c(2,2))
hist(plotA,xlab="cash", main="A",xlim=c(-20,300),ylim=c(0,40),breaks=c(20*-1:15))
hist(plotB,xlab="cash", main="B",xlim=c(-20,300),ylim=c(0,40),breaks=c(20*-1:15))
hist(plotC,xlab="cash", main="C",xlim=c(-20,300),ylim=c(0,40),breaks=c(20*-1:15))
hist(plotD,xlab="cash", main="D",xlim=c(-20,300),ylim=c(0,40),breaks=c(20*-1:15))
hist(plotB)
hist(plotB,breaks=c(20*0:15))
set.seed(222)
plotA<-round(rnorm(100,75,50),0)
plotA[plotA>300]<-300
plotA[plotA< -20]<- -20
a<-round(rnorm(49,10,3),0)
a[sample(1:49,9)]<-0
b<-round(rnorm(30,35,10),0)
c<-round(rnorm(12,75,20),0)
d<-round(rnorm(5,175,60),0)
plotB<-c(a,b,c,d,250,225,200,180)
plotB[plotB<0]<-0
plotC<-runif(100,0,300)
plotD<-rnorm(100,100,60)
plotD[plotD<0]<-0
par(mfrow=c(2,2))
hist(plotA,xlab="cash", main="A",xlim=c(-20,300),ylim=c(0,50),breaks=c(20*-1:15))
hist(plotB,xlab="cash", main="B",xlim=c(-20,300),ylim=c(0,50),breaks=c(20*-1:15))
hist(plotC,xlab="cash", main="C",xlim=c(-20,300),ylim=c(0,50),breaks=c(20*-1:15))
hist(plotD,xlab="cash", main="D",xlim=c(-20,300),ylim=c(0,50),breaks=c(20*-1:15))
min(plotB)
set.seed(222)
plotA<-round(rnorm(100,75,50),0)
plotA[plotA>300]<-300
plotA[plotA< -20]<- -20
a<-round(rnorm(49,10,3),0)
a[sample(1:49,9)]<-0
b<-round(rnorm(30,35,10),0)
c<-round(rnorm(12,75,20),0)
d<-round(rnorm(5,175,60),0)
plotB<-c(a,b,c,d,250,225,200,180)
plotB[plotB<0]<-0
plotC<-runif(100,0,300)
plotD<-rnorm(100,100,60)
plotD[plotD<0]<-0
par(mfrow=c(2,2))
hist(plotA,xlab="cash", main="A",xlim=c(-20,300),ylim=c(0,50),breaks=c(20*-1:15))
hist(plotB,xlab="cash", main="B",xlim=c(0,300),ylim=c(0,50),breaks=c(20*-1:15))
hist(plotC,xlab="cash", main="C",xlim=c(0,300),ylim=c(0,50),breaks=c(20*-1:15))
hist(plotD,xlab="cash", main="D",xlim=c(0,300),ylim=c(0,50),breaks=c(20*-1:15))
set.seed(222)
plotA<-round(rnorm(100,75,50),0)
plotA[plotA>300]<-300
#plotA[plotA< -20]<- -20
a<-round(rnorm(49,10,3),0)
a[sample(1:49,9)]<-0
b<-round(rnorm(30,35,10),0)
c<-round(rnorm(12,75,20),0)
d<-round(rnorm(5,175,60),0)
plotB<-c(a,b,c,d,250,225,200,180)
plotB[plotB<0]<-0
plotC<-runif(100,0,300)
plotD<-rnorm(100,100,60)
plotD[plotD<0]<-0
par(mfrow=c(2,2))
hist(plotA,xlab="cash", main="A",xlim=c(-20,300),ylim=c(0,50),breaks=c(20*-1:15))
hist(plotB,xlab="cash", main="B",xlim=c(0,300),ylim=c(0,50),breaks=c(20*-1:15))
hist(plotC,xlab="cash", main="C",xlim=c(0,300),ylim=c(0,50),breaks=c(20*-1:15))
hist(plotD,xlab="cash", main="D",xlim=c(0,300),ylim=c(0,50),breaks=c(20*-1:15))
set.seed(222)
plotA<-round(rnorm(100,75,50),0)
plotA[plotA>300]<-300
plotA[plotA< -20]<- -20
a<-round(rnorm(49,10,3),0)
a[sample(1:49,9)]<-0
b<-round(rnorm(30,35,10),0)
c<-round(rnorm(12,75,20),0)
d<-round(rnorm(5,175,60),0)
plotB<-c(a,b,c,d,250,225,200,180)
plotB[plotB<0]<-0
plotC<-runif(100,0,300)
plotD<-rnorm(100,100,60)
plotD[plotD<0]<-0
par(mfrow=c(2,2))
hist(plotA,xlab="cash", main="A",xlim=c(0,300),ylim=c(0,50),breaks=c(20*-1:15))
hist(plotB,xlab="cash", main="B",xlim=c(0,300),ylim=c(0,50),breaks=c(20*-1:15))
hist(plotC,xlab="cash", main="C",xlim=c(0,300),ylim=c(0,50),breaks=c(20*-1:15))
hist(plotD,xlab="cash", main="D",xlim=c(0,300),ylim=c(0,50),breaks=c(20*-1:15))
set.seed(222)
plotA<-round(rnorm(100,75,50),0)
plotA[plotA>300]<-300
plotA[plotA< -20]<- -20
a<-round(rnorm(49,10,3),0)
a[sample(1:49,9)]<-0
b<-round(rnorm(30,35,10),0)
c<-round(rnorm(12,75,20),0)
d<-round(rnorm(5,175,60),0)
plotB<-c(a,b,c,d,250,225,200,180)
plotB[plotB<0]<-0
plotC<-runif(100,0,300)
plotD<-rnorm(100,100,60)
plotD[plotD<0]<-0
par(mfrow=c(2,2))
hist(plotA,xlab="cash", main="A",xlim=c(0,300),ylim=c(0,20),breaks=c(20*-1:15))
hist(plotB,xlab="cash", main="B",xlim=c(0,300),ylim=c(0,50),breaks=c(20*-1:15))
hist(plotC,xlab="cash", main="C",xlim=c(0,300),ylim=c(0,20),breaks=c(20*-1:15))
hist(plotD,xlab="cash", main="D",xlim=c(0,300),ylim=c(0,20),breaks=c(20*-1:15))
getOption("defaultPackages")
getGenerics("datasets")
?getGenerics
isGeneric(show)
isGeneric(show,datasets)
isGeneric(show,"datasets")
isGeneric("show","datasets")
isGeneric("show")
isGeneric("predict")
isGeneric("colSums")
isGeneric("lm")
isGeneric("dgamma")
isGeneric("mean")
getOption("defaultPackages")
getGeneric("datasets")
?getGenerics
getGenerics
getGenerics()
getOption("defaultPackages")
?getMethod
?showMethods
?getMethod
isGeneric(predict)
isGeneric("predict")
isGeneric("colSums")
library(shiny)
runExample("01_hello")
getwd()
?mkdir
runApp("DistributionApp")
runApp("DistributionApp",display.mode="Showcase")
runApp("DistributionApp",display.mode="showcase")
shiny::runApp('distributionApp')
shiny::runApp('distributionApp')
shiny::runApp('distributionApp')
shiny::runApp('distributionApp')
shiny::runApp('distributionApp')
shiny::runApp('distributionApp')
shiny::runApp('distributionApp')
shiny::runApp('distributionApp')
shiny::runApp('distributionApp')
shiny::runApp('distributionApp')
shiny::runApp('distributionApp')
shiny::runApp('distributionApp')
?numericInput
shiny::runApp('distributionApp')
shiny::runApp('distributionApp')
shiny::runApp('distributionApp')
shiny::runApp('distributionApp')
shiny::runApp('distributionApp')
shiny::runApp('distributionApp')
shiny::runApp('distributionApp')
shiny::runApp('distributionApp')
?tags
shiny::runApp('distributionApp')
shiny::runApp('distributionApp')
shiny::runApp('distributionApp')
shiny::runApp('distributionApp')
shiny::runApp('distributionApp')
shiny::runApp('distributionApp')
shiny::runApp('distributionApp')
tags$sub("a")
as.character(tags$sub("a"))
display(tags$sub("a"))
x <- list(tags$h1("Title"),
tags$h2("Header text"),
tags$p("Text here"))
tagList(x)
p("hi")
?radioButtons
shiny::runApp('distributionApp')
shiny::runApp('distributionApp')
shiny::runApp('distributionApp')
shiny::runApp('distributionApp')
shiny::runApp('distributionApp')
shiny::runApp('distributionApp')
shiny::runApp('distributionApp')
shiny::runApp('distributionApp')
library(ggplot2)
?qplot
p <- ggplot(x=c(-3,3),aes(x=x))
p <- ggplot(data.frame(x=c(-3,3)),aes(x=x))
p + stat-function(fun=dnorm)
p + stat_function(fun=dnorm)
p + stat_function(fun=dnorm) + stat_function(fun=dnorm_limit,geom="area",fill="blue",alpha=.2)
dnorm_limit <-function (x) {}
dnorm_limit <-function (x) {
y <- dnorm(x)
y[x < -3 | x > 3] <-NA
return(y)
}
p + stat_function(fun=dnorm) + stat_function(fun=dnorm_limit,geom="area",fill="blue",alpha=.2)
p <- ggplot(data.frame(x=c(-3,3)),aes(x=x)) #edit the 3s
p + stat_function(fun=dnorm) + stat_function(fun=dnorm_limit,geom="area",fill="blue",alpha=.2)
dnorm_limit <-function (x) {
y <- dnorm(x)
y[x > -3 | x < 3] <-NA #edit these limits
return(y)
}
p <- ggplot(data.frame(x=c(-3,3)),aes(x=x)) #edit the 3s
p + stat_function(fun=dnorm) + stat_function(fun=dnorm_limit,geom="area",fill="blue",alpha=.2)
p <- ggplot(data.frame(x=c(-4,4)),aes(x=x)) #edit the 3s
p + stat_function(fun=dnorm) + stat_function(fun=dnorm_limit,geom="area",fill="blue",alpha=.2)
shiny::runApp('distributionApp')
shiny::runApp('distributionApp')
shiny::runApp('distributionApp')
shiny::runApp('distributionApp')
?pnorm
pnrom(3)
pnorm(3)
pnorm(3,lower.tail=FALSE)
?radioButtons
?round
shiny::runApp('distributionApp')
shiny::runApp('distributionApp')
getwd()
setwd("/Users/karen/distribApp")
setwd("/Users/karen/distributionApp")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?stat_function
set.seed(1492)
df <- data.frame(
x = rnorm(100)
)
x <- df$x
base <- ggplot(df, aes(x)) + geom_density()
base + stat_function(fun = dnorm, colour = "red")
base + stat_function(fun = dnorm, colour = "red", arg = list(mean = 3))
base + stat_function(fun = dnorm, colour = "red", arg = list(mean = 3))
base + stat_function(fun = dnorm, colour = "red")
base + stat_function(fun = dnorm, colour = "red", arg = list(mean = 3))
?dnorm
shiny::runApp()
dnorm(c(-4,4))
?stat_function
shiny::runApp()
shiny::runApp()
dnorm_limit <-function (fun,limit,direction="two") {
function (x) {
# for selecting the areas for shading under the distribution of interest as defined by fun
y <- fun(x)
if (direction=="upper") y[x < limit] <- NA
else if (direction=="lower") y[x>limit] <- NA
else {
y[x<abs(limit)] <- NA
y[x>-abs(limit)] <- NA
}
return(y)
}
}
p <- ggplot(data.frame(x=c(-4,4)),aes(x=x)) #edit the 3s
p + stat_function(fun=dnorm) + stat_function(fun=dnorm_limit(dnorm,input$testStat,input$numTails),geom="area",fill="blue",alpha=0.2)
p <- ggplot(data.frame(x=c(-4,4)),aes(x=x)) #edit the 3s
p + stat_function(fun=dnorm) + stat_function(fun=dnorm_limit(dnorm,0,"two"),geom="area",fill="blue",alpha=0.2)
limit_range <- function (fun,min,max){}
limit_range <- function (fun,min,max){ function (x) {y <-fun (x);y[x<min|x>max] <- NA; return(y)}}
p
p + stat_function(fun=dnorm) + stat_function(fun=limit_range(dnorm,0,2),geom="area",fill="blue",alpha=0.2)
p + stat_function(fun=dnorm) + stat_function(fun=limit_range(dnorm,-2,2),geom="area",fill="blue",alpha=0.2)
edit(limit_range)
p + stat_function(fun=dnorm) + stat_function(fun=limit_range(dnorm,-2,2),geom="area",fill="blue",alpha=0.2)
limit_range
edit(limit_range)
p + stat_function(fun=dnorm) + stat_function(fun=limit_range(dnorm,-2,2),geom="area",fill="blue",alpha=0.2)
limit_range
edit(limit_range)
limit_range
edit(limit_range)
limit_range<-edit(limit_range)
p + stat_function(fun=dnorm) + stat_function(fun=limit_range(dnorm,-2,2),geom="area",fill="blue",alpha=0.2)
limit_range<-edit(limit_range)
p + stat_function(fun=dnorm) + stat_function(fun=limit_range(dnorm,-2,2),geom="area",fill="blue",alpha=0.2)
limit_range<-edit(limit_range)
p + stat_function(fun=dnorm) + stat_function(fun=limit_range(dnorm,-2,2),geom="area",fill="blue",alpha=0.2)
limit_range<-edit(limit_range)
p + stat_function(fun=dnorm) + stat_function(fun=limit_range(dnorm,-2,2),geom="area",fill="blue",alpha=0.2)
limit_range<-edit(limit_range)
p + stat_function(fun=dnorm) + stat_function(fun=limit_range(dnorm,-2,2),geom="area",fill="blue",alpha=0.2)
x<-1:10
x[x<6]
x[x<6 & x>3]
shiny::runApp()
y <-dnorm(x)
y
x
x<-c(-4,4)
x
y <-dnorm(x)
y
x
x< 2
?stat_function
shiny::runApp()
dnorm_limit <-function (fun,limit,direction="two") {
function (x) {
# for selecting the areas for shading under the distribution of interest as defined by fun
y <- fun(x)
if (direction=="upper") y[x < limit] <- NA
else if (direction=="lower") y[x>limit] <- NA
else y[x<2 & x>-2] <- NA
return(y)
}
}
dlimit<-dnorm_limit(dnorm,2)
dlimit
dnorm_limit <-function (fun,limit,direction="two") {
function (x) {
# for selecting the areas for shading under the distribution of interest as defined by fun
y <- fun(x)
y
if (direction=="upper") y[x < limit] <- NA
else if (direction=="lower") y[x>limit] <- NA
else y[x<2 & x>-2] <- NA
return(y)
}
}
dlimit<-dnorm_limit(dnorm,2)
shiny::runApp()
dnorm_limit <-function (fun,limit,direction="two") {
function (x) {
# for selecting the areas for shading under the distribution of interest as defined by fun
y <- fun(x)
print(y)
if (direction=="upper") y[x < limit] <- NA
else if (direction=="lower") y[x>limit] <- NA
else y[x<2 & x>-2] <- NA
return(y)
}
}
dlimit<-dnorm_limit(dnorm,2)
p + stat_function(fun=dnorm) + stat_function(fun=dnorm_limit(dnorm,2),geom="area",fill="blue",alpha=0.2)
p + stat_function(fun=dnorm) + stat_function(fun=dnorm_limit(dnorm,2,"upper"),geom="area",fill="blue",alpha=0.2)
dnorm_limit <-function (fun,limit,direction="two") {
function (x) {
# for selecting the areas for shading under the distribution of interest as defined by fun
y <- fun(x)
print(y)
if (direction=="upper") y[x < limit] <- NA
else if (direction=="lower") y[x>limit] <- NA
else y[x<2 & x>-2] <- NA
print(y)
return(y)
}
}
p + stat_function(fun=dnorm) + stat_function(fun=dnorm_limit(dnorm,2,"upper"),geom="area",fill="blue",alpha=0.2)
shiny::runApp()
shiny::runApp()
shiny::runApp()
?ggplot
shiny::runApp()
?renderPlot
shiny::runApp()
shiny::runApp()
?textOutput
shiny::runApp()
shiny::runApp()
dnorm(2)
dnorm(1)
shiny::runApp()
